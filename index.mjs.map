{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport getShape from '@stdlib/ndarray-base-shape';\nimport sliceFrom from '@stdlib/ndarray-base-slice-from';\nimport sliceTo from '@stdlib/ndarray-base-slice-to';\nimport nulls from '@stdlib/array-base-nulls';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an array containing a truncated view of an input ndarray and a view of the last element(s) along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - dimension along which to perform the operation\n* @param {boolean} writable - boolean indicating whether returned arrays should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {Array<ndarray>} a list of ndarrays\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = pop( x, 0, false );\n* // returns [ <ndarray>, <ndarray> ]\n*\n* arr = ndarray2array( y[ 0 ] );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*\n* arr = ndarray2array( y[ 1 ] );\n* // returns [ [ 5.0, 6.0 ] ]\n*/\nfunction pop( x, dim, writable ) {\n\tvar v0;\n\tvar v1;\n\tvar sh;\n\tvar N;\n\tvar s;\n\n\t// Retrieve array meta data:\n\tsh = getShape( x );\n\tN = sh.length;\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'nullF7', N ) );\n\t}\n\t// Normalize the dimension index:\n\tdim = normalizeIndex( dim, N-1 );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'nullF8', N, dim ) );\n\t}\n\t// Define a list of slice arguments:\n\ts = nulls( N );\n\ts[ dim ] = sh[ dim ] - 1;\n\n\t// Create a truncated view:\n\tv0 = sliceTo( x, s, false, writable );\n\n\t// Create a view of the last element(s):\n\tv1 = sliceFrom( x, s, false, writable );\n\n\treturn [ v0, v1 ];\n}\n\n\n// EXPORTS //\n\nexport default pop;\n"],"names":["pop","x","dim","writable","sh","N","s","getShape","length","TypeError","format","normalizeIndex","RangeError","nulls","sliceTo","sliceFrom"],"mappings":";;2jBAkEA,SAASA,EAAKC,EAAGC,EAAKC,GACrB,IAEIC,EACAC,EACAC,EAOJ,GAAW,KAHXD,GADAD,EAAKG,EAAUN,IACRO,QAIN,MAAM,IAAIC,UAAWC,EAAQ,SAAUL,IAIxC,IAAc,KADdH,EAAMS,EAAgBT,EAAKG,EAAE,IAE5B,MAAM,IAAIO,WAAYF,EAAQ,SAAUL,EAAGH,IAY5C,OATAI,EAAIO,EAAOR,IACRH,GAAQE,EAAIF,GAAQ,EAQhB,CALFY,EAASb,EAAGK,GAAG,EAAOH,GAGtBY,EAAWd,EAAGK,GAAG,EAAOH,GAG9B"}