{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar getShape = require( '@stdlib/ndarray-base-shape' );\nvar sliceFrom = require( '@stdlib/ndarray-base-slice-from' );\nvar sliceTo = require( '@stdlib/ndarray-base-slice-to' );\nvar nulls = require( '@stdlib/array-base-nulls' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing a truncated view of an input ndarray and a view of the last element(s) along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - dimension along which to perform the operation\n* @param {boolean} writable - boolean indicating whether returned arrays should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @returns {Array<ndarray>} a list of ndarrays\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = pop( x, 0, false );\n* // returns [ <ndarray>, <ndarray> ]\n*\n* arr = ndarray2array( y[ 0 ] );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*\n* arr = ndarray2array( y[ 1 ] );\n* // returns [ [ 5.0, 6.0 ] ]\n*/\nfunction pop( x, dim, writable ) {\n\tvar v0;\n\tvar v1;\n\tvar sh;\n\tvar N;\n\tvar s;\n\n\t// Retrieve array meta data:\n\tsh = getShape( x );\n\tN = sh.length;\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\tdim = normalizeIndex( dim, N-1 );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Define a list of slice arguments:\n\ts = nulls( N );\n\ts[ dim ] = sh[ dim ] - 1;\n\n\t// Create a truncated view:\n\tv0 = sliceTo( x, s, false, writable );\n\n\t// Create a view of the last element(s):\n\tv1 = sliceFrom( x, s, false, writable );\n\n\treturn [ v0, v1 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = pop;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an array containing a truncated view of an input ndarray and a view of the last element(s) along a specified dimension.\n*\n* @module @stdlib/ndarray-base-pop\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var pop = require( '@stdlib/ndarray-base-pop' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = pop( x, 0, false );\n* // returns [ <ndarray>, <ndarray> ]\n*\n* arr = ndarray2array( y[ 0 ] );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*\n* arr = ndarray2array( y[ 1 ] );\n* // returns [ [ 5.0, 6.0 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAiB,QAAS,sCAAuC,EACjEC,EAAW,QAAS,4BAA6B,EACjDC,EAAY,QAAS,iCAAkC,EACvDC,EAAU,QAAS,+BAAgC,EACnDC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAS,QAAS,uBAAwB,EAuC9C,SAASC,EAAKC,EAAGC,EAAKC,EAAW,CAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAOJ,GAJAF,EAAKX,EAAUM,CAAE,EACjBM,EAAID,EAAG,OAGFC,IAAM,EACV,MAAM,IAAI,UAAWR,EAAQ,+GAAgHQ,CAAE,CAAE,EAIlJ,GADAL,EAAMR,EAAgBQ,EAAKK,EAAE,CAAE,EAC1BL,IAAQ,GACZ,MAAM,IAAI,WAAYH,EAAQ,6GAA8GQ,EAAGL,CAAI,CAAE,EAGtJ,OAAAM,EAAIV,EAAOS,CAAE,EACbC,EAAGN,CAAI,EAAII,EAAIJ,CAAI,EAAI,EAGvBE,EAAKP,EAASI,EAAGO,EAAG,GAAOL,CAAS,EAGpCE,EAAKT,EAAWK,EAAGO,EAAG,GAAOL,CAAS,EAE/B,CAAEC,EAAIC,CAAG,CACjB,CAKAZ,EAAO,QAAUO,ICjDjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "normalizeIndex", "getShape", "sliceFrom", "sliceTo", "nulls", "format", "pop", "x", "dim", "writable", "v0", "v1", "sh", "N", "s", "main"]
}
